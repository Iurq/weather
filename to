[32mUsage: py2deb [OPTIONS] ...
[0m
Convert Python packages to Debian packages according to the given
command line options (see below). The command line arguments are the
same as accepted by the `pip install' command because py2deb invokes
pip during the conversion process. This means you can name the
package(s) to convert on the command line but you can also use
`requirement files' if you prefer.

If you want to pass command line options to pip (e.g. because you want
to use a custom index URL or a requirements file) then you will need
to tell py2deb where the options for py2deb stop and the options for
pip begin. In such cases you can use the following syntax:

  $ py2deb [32m-r[0m /tmp -- [32m-r[0m requirements.txt

So the `--' marker separates the py2deb options from the pip options.

Supported options:

  [32m-c[0m, [32m--config=FILENAME[0m

    Load a configuration file. Because the command line arguments are processed
    in the given order, you have the choice and responsibility to decide if
    command line options override configuration file options or vice versa.
    Refer to the documentation for details on the configuration file format.

    The default configuration files /etc/py2deb.ini and ~/.py2deb.ini are
    automatically loaded if they exist. This happens before environment
    variables and command line options are processed.

    Can also be set using the environment variable [32m$PY2DEB_CONFIG[0m.

  [32m-r[0m, [32m--repository=DIRECTORY[0m

    Change the directory where *.deb archives are stored. Defaults to
    the system wide temporary directory (which is usually /tmp). If
    this directory doesn't exist py2deb refuses to run.

    Can also be set using the environment variable [32m$PY2DEB_REPOSITORY[0m.

  [32m--use-system-package=PYTHON_PACKAGE_NAME,DEBIAN_PACKAGE_NAME[0m

    Exclude a Python package (the name before the comma) from conversion and
    replace references to the Python package with a specific Debian package
    name. This allows you to use system packages for specific Python
    requirements.

  [32m--name-prefix=PREFIX[0m

    Set the name prefix used during the name conversion from Python to
    Debian packages. Defaults to `python'. The name prefix and package
    names are always delimited by a dash.

    Can also be set using the environment variable [32m$PY2DEB_NAME_PREFIX[0m.

  [32m--no-name-prefix=PYTHON_PACKAGE_NAME[0m

    Exclude a Python package from having the name prefix applied
    during the package name conversion. This is useful to avoid
    awkward repetitions.

  [32m--rename=PYTHON_PACKAGE_NAME,DEBIAN_PACKAGE_NAME[0m

    Override the package name conversion algorithm for the given pair
    of package names. Useful if you don't agree with the algorithm :-)

  [32m--install-prefix=DIRECTORY[0m

    Override the default system wide installation prefix. By setting
    this to anything other than `/usr' or `/usr/local' you change the
    way py2deb works. It will build packages with a file system layout
    similar to a Python virtual environment, except there will not be
    a Python executable: The packages are meant to be loaded by
    modifying Python's module search path. Refer to the documentation
    for details.

    Can also be set using the environment variable [32m$PY2DEB_INSTALL_PREFIX[0m.

  [32m--install-alternative=LINK,PATH[0m

    Use Debian's `update-alternatives' system to add an executable
    that's installed in a custom installation prefix (see above) to
    the system wide executable search path. Refer to the documentation
    for details.

  [32m--python-callback=EXPRESSION[0m

    Set a Python callback to be called during the conversion process. Refer to
    the documentation for details about the use of this feature and the syntax
    of [32mEXPRESSION[0m.

    Can also be set using the environment variable [32m$PY2DEB_CALLBACK[0m.

  [32m--report-dependencies=FILENAME[0m

    Add the Debian relationships needed to depend on the converted
    package(s) to the given control file. If the control file already
    contains relationships the additional relationships will be added
    to the control file; they won't overwrite existing relationships.

  [32m-y[0m, [32m--yes[0m

    Instruct pip-accel to automatically install build time dependencies
    where possible. Refer to the pip-accel documentation for details.

    Can also be set using the environment variable [32m$PY2DEB_AUTO_INSTALL[0m.

  [32m-v[0m, [32m--verbose[0m

    Make more noise :-).

  [32m-h[0m, [32m--help[0m

    Show this message and exit.